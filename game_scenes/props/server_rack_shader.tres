[gd_resource type="VisualShader" load_steps=13 format=2]

[ext_resource path="res://assets/textures/gradients/gradient2.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeVectorInterp" id=1]

[sub_resource type="VisualShaderNodeScalarUniform" id=2]
uniform_name = "light_on"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=7]
constant = 15.0

[sub_resource type="VisualShaderNodeColorUniform" id=8]
uniform_name = "Off"

[sub_resource type="VisualShaderNodeColorUniform" id=9]
uniform_name = "On"

[sub_resource type="VisualShaderNodeScalarUniform" id=10]
uniform_name = "light_alpha"

[sub_resource type="VisualShaderNodeScalarConstant" id=11]
constant = 1.0

[resource]
code = "shader_type spatial;
uniform vec4 Off : hint_color;
uniform vec4 On : hint_color;
uniform float light_alpha;
uniform float light_on;
uniform sampler2D tex_frg_15;


void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:24
	vec3 n_out24p0;
	float n_out24p1;
	n_out24p0 = Off.rgb;
	n_out24p1 = Off.a;

// ColorUniform:25
	vec3 n_out25p0;
	float n_out25p1;
	n_out25p0 = On.rgb;
	n_out25p1 = On.a;

// ScalarUniform:4
	float n_out4p0;
	n_out4p0 = light_alpha;

// VectorMix:10
	vec3 n_out10p0;
	n_out10p0 = mix( n_out24p0 , n_out25p0 , vec3(n_out4p0) );

// ScalarUniform:12
	float n_out12p0;
	n_out12p0 = light_on;

// VectorOp:13
	vec3 n_out13p0;
	n_out13p0 = n_out10p0 * vec3(n_out12p0);

// Texture:15
	vec3 n_out15p0;
	float n_out15p1;
	vec4 tex_frg_15_read = texture( tex_frg_15 , UV.xy );
	n_out15p0 = tex_frg_15_read.rgb;
	n_out15p1 = tex_frg_15_read.a;

// VectorOp:16
	vec3 n_out16p0;
	n_out16p0 = n_out13p0 * n_out15p0;

// Scalar:9
	float n_out9p0;
	n_out9p0 = 1.000000;

// Scalar:23
	float n_out23p0;
	n_out23p0 = 15.000000;

// VectorOp:22
	vec3 n_out22p0;
	n_out22p0 = n_out16p0 * vec3(n_out23p0);

// Output:0
	ALBEDO = n_out16p0;
	ALPHA = n_out9p0;
	EMISSION = n_out22p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -501, -65.5 )
nodes/fragment/0/position = Vector2( 1120, 340 )
nodes/fragment/4/node = SubResource( 10 )
nodes/fragment/4/position = Vector2( -200, 320 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( 140, 540 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 0, 180 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( -220, 400 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 140, 220 )
nodes/fragment/15/node = SubResource( 4 )
nodes/fragment/15/position = Vector2( -260, 480 )
nodes/fragment/16/node = SubResource( 5 )
nodes/fragment/16/position = Vector2( 300, 340 )
nodes/fragment/22/node = SubResource( 6 )
nodes/fragment/22/position = Vector2( 839, 498 )
nodes/fragment/23/node = SubResource( 7 )
nodes/fragment/23/position = Vector2( 600, 580 )
nodes/fragment/24/node = SubResource( 8 )
nodes/fragment/24/position = Vector2( -380, 120 )
nodes/fragment/25/node = SubResource( 9 )
nodes/fragment/25/position = Vector2( -380, 240 )
nodes/fragment/connections = PoolIntArray( 4, 0, 10, 2, 10, 0, 13, 0, 12, 0, 13, 1, 13, 0, 16, 0, 15, 0, 16, 1, 9, 0, 0, 1, 23, 0, 22, 1, 22, 0, 0, 5, 16, 0, 0, 0, 16, 0, 22, 0, 24, 0, 10, 0, 25, 0, 10, 1 )
